import math
from abc import ABC, abstractmethod


class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass


class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * self.radius ** 2

    def perimeter(self):
        return 2 * math.pi * self.radius


class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

    def perimeter(self):
        return 2 * self.width + 2 * self.height


class Triangle(Shape):
    def __init__(self, base, height):
        self.base = base
        self.height = height

    def area(self):
        return 0.5 * self.base * self.height

    def perimeter(self):
        return self.base + self.height + math.sqrt(self.base ** 2 + self.height ** 2)


def main():
    shapes = [Circle(5), Rectangle(3, 4), Triangle(6, 8)]
    for shape in shapes:
        print("Area of {}: {}".format(type(shape).__name__, shape.area()))
        print("Perimeter of {}: {}".format(type(shape).__name__, shape.perimeter()))


if __name__ == "__main__":
    main()
